# -*- coding: utf-8 -*-
"""code-RUL-test-data-lstm-trg-data-lstm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u2CiqGhNIw6OXAp_np_mGekUKXfTrkF1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

#importing the training dataset
train = pd.read_csv('/content/drive/My Drive/trg-9-new.csv')

#deleting the unwanted columns
cols = ['s1','s2','s3','s4','s5','s6','s7','s8','s9','s10','s11','s12','s13','s14','s15','s16','s17','s18','s19','s20','s21','setting1','setting2','setting3','RUL']
train = train.drop(cols,axis = 1)

#shifting the time cycles such that last time cycle of each aircraft points to zero
unitlife = []
n = train['id'].nunique()
for i in range(1,n+1):
    k = train[train['id'] == i].shape[0]
    unitlife += k*[k]
train['unitlife'] = unitlife
train['cycle'] = train['cycle']-train['unitlife']
train = train.drop('unitlife',axis = 1)

df = train

#defining an  exponential averaging filter
def get_avg(val,prev,alpha):
  return alpha*val+(1-alpha)*prev

def ewma(HI,alpha):
  s=0
  avg_y = []
  for i in range(len(HI)):
    s = s+HI[i]
    if(i<10):
      avg_y.append(s/(i+1))
    else:
      avg_y.append(get_avg(HI[i],avg_y[i-1],alpha))
  return avg_y



#finding the fitting exponential pattern for each unit in training dataset
from scipy.optimize import curve_fit

#equation used to fit the curves
def func(x,a,b,c,d):
    return d+a*(np.exp(b*x+c)-np.exp(c))

fitted_curve_parameters = []    
covariance = []
var = 0

for i in range(1,n+1):

    data = df[df['id'] == i]
    x = np.array(data['cycle'])
    y = np.array(data['HI'])

    #applying EWMA filter
    y = ewma(y,alpha = 0.2)
    popt, pcov = curve_fit(func,x,y)

    parameter_var = 0
    for j in range(4):
        parameter_var = parameter_var + pcov[j][j]

    #estimating the prediction variance 
    prediction_var = 0

    if(parameter_var != float('inf')):

      estimate = []
      a = popt[0]
      b = popt[1]
      c = popt[2]
      d = popt[3]
      for element in x:
        est = func(element,a,b,c,d)
        estimate.append(est)
      prediction_var = np.var(estimate)

    else:
      prediction_var = float('inf')
            
    fitted_curve_parameters.append(popt)        
    covariance.append(prediction_var)


#importing the test dataset
test = pd.read_csv('/content/drive/My Drive/test-9-new.csv')

#dropping the unwanted columns
cols = ['s1','s2','s3','s4','s5','s6','s7','s8','s9','s10','s11','s12','s13','s14','s15','s16','s17','s18','s19','s20','s21','setting1','setting2','setting3']
test = test.drop(cols,axis = 1)


#doing the RUL estimation for each unit in test data
df_test = test
num = df_test['id'].max()

def get(x,a,b,c,d):
    return d+a*(np.exp(b*x+c)-np.exp(c))

index = 0
RUL_final = []
for t in range(num):
    data1 = df_test[df_test['id'] == (t+1)]
    r = data1.shape[0]
    HI = data1['HI']
    
    RUL_list = []
    Dis_list = []
    aircraft_num = []
    
    for j in range (218):
        
        RUL = -1
        Dis = -1
        ac_num = -1
        n = df[df['id'] == (j+1)].shape[0]
        k = n-r+1
        
        if(k > 0):
            if (covariance[j] != float('inf')):
                for tou in range(k):

                    #only for Tou =0 and M1 that is model obtained from unit1

                    s = 0
                    a = fitted_curve_parameters[j][0]
                    b = fitted_curve_parameters[j][1]
                    c = fitted_curve_parameters[j][2]
                    d = fitted_curve_parameters[j][3]
                    
                    #calculating distance of test unit with model j
                    for i in range (r):
                        y = HI[i+index]
                        p = get(i-r-tou,a,b,c,d)
                        s = s+(y-p)*(y-p)
                    dis = s/covariance[j]
                    rul = tou
                    
                    if(Dis == -1):
                        Dis = dis
                        RUL = rul
                        ac_num = j+1
                    else:
                        if(Dis > dis):
                            Dis = dis
                            RUL = rul
                            ac_num = j+1

                    #store the RUL and dis for the min dis-Tou in list dist
                #store the dist for each model

        if(Dis != -1):
            RUL_list.append(RUL)
            Dis_list.append(Dis)
            aircraft_num.append(ac_num)
    p = []
    p.append(aircraft_num)
    p.append(RUL_list)
    p.append(Dis_list)
    
    # create a data frame sort it by distance, reindex it and select the top 
    # 25% of data for RUL estimation

    df1 = pd.DataFrame(p,index = ['A/C No.','RUL','Dis']).T

    #sorting according to distance
    df1 = df1.sort_values(['Dis'])

    x = len(p[0])
    if(x == 0):
      RUL_final.append(0)
      index = index+r
      continue

    idx = []
    for i in range(x):
        idx.append(i)

    #re-indexing
    df1.index = idx

    #outlier removal

    df1 = df1[df1['RUL']<200]
    min_total_life = 125
    df0 = df1[df1['RUL'] > min_total_life-r]
    while(df0.shape[0] == 0):
      min_total_life = min_total_life-5
      df0 = df1[df1['RUL'] > min_total_life-r]

    df1 = df0
    len_df1 = df1.shape[0]

    #re-indexing
    re_index = []
    for i in range(len_df1):
        re_index.append(i)
    df1.index = re_index

    ## performing candidate selection

    len_df1 = (int)(len_df1)/6
    d0 = df1['Dis'][0]

    df2 = df1[df1['Dis']< 1.25*d0]
    len_df2 = df2.shape[0]

    if(len_df2 < 10):
      df2 = df1[df1.index < len_df1]


    Q1 = df2['RUL'].quantile(0.25)
    Q2 = df2['RUL'].quantile(0.50)
    Q3 = df2['RUL'].quantile(0.75)
    I1 = Q3 - Q2
    I2 = Q2 - Q1

    # Filtering Values between Q1-1.5IQR and Q3+1.5IQR

    RUL_min = df2['RUL'].min()
    RUL_max = df2['RUL'].max()
    RUL_est = (13*RUL_min + 10*RUL_max)/23

    df2 = df2[df2['RUL']<(Q2+2*I1)]
    if(df2.shape[0]>0):
      RUL_min = df2['RUL'].min()
      RUL_max = df2['RUL'].max()
      RUL_est = (13*RUL_min + 10*RUL_max)/23
      
    df2 = df2[df2['RUL']> (Q2-3*I2)]   
    if(df2.shape[0]>0):
      RUL_min = df2['RUL'].min()
      RUL_max = df2['RUL'].max()
      RUL_est = (13*RUL_min + 10*RUL_max)/23
      
    re_re_index = []
    len_df2 = df2.shape[0]
    for i in range(len_df2):
        re_re_index.append(i)
    df2.index = re_re_index

    RUL_final.append(RUL_est)
    index = index+r


with open('/content/drive/My Drive/RUL_test_data-3.txt', 'w') as f:
  for item in RUL_final:
    f.write("%s\n" % item)

